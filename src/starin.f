C
C
C$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
C STARIN
C$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
      SUBROUTINE STARIN(BL,CFENV,DAGE,DDAGE,DELTS,DELTSH,DELTS0,ETA2,FP,
     * FT,FTRI,HCOMP,HD,HI,HJM,HKEROT,HL,HP,HR,HS,HS1,HS2,HSTOT,HT,IKUT,
     * ISTORE,JCORE,JENV,LARGE,LC,LNEW,M,MODEL,NK,OMEGA,PS,QDP,QDT,QIW,
     * R0,RS,SJTOT,SKEROT,SMASS,TEFFL,TLUMX,TRIL,TRIT,TS,VEL,HG,V)

      PARAMETER (JSON=5000)
      PARAMETER (NTS=63, NPS=76)
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT LOGICAL*4(L)
C DBGLAOL
      INTEGER*4 KATM, KENV, KSAHA
      REAL*8 OLAOL(12,104,52),OXA(12),OT(52),ORHO(104),TOLLAOL
      CHARACTER*256 OPECALEX(7)
      CHARACTER*4 ATEMP
      CHARACTER*6 EOS
      CHARACTER*4 ATM, LOK, HIK, COMPMIX
      CHARACTER*256 FLAOL, FPUREZ
      CHARACTER*256 FLAST, FFIRST, FRUN, FSTAND, FFERMI,
     1    FDEBUG, FTRACK, FSHORT, FMILNE, FMODPT,
     2    FSTOR, FPMOD, FPENV, FPATM, FDYN,
     3    FLLDAT, FSNU, FSCOMP, FKUR, 
     4    FMHD1, FMHD2, FMHD3, FMHD4, FMHD5, FMHD6, FMHD7, FMHD8
      COMMON/LUNUM/IFIRST, IRUN, ISTAND, IFERMI,
     1    IOPMOD, IOPENV, IOPATM, IDYN,
     2    ILLDAT, ISNU, ISCOMP, IKUR
      COMMON/LUFNM/ FLAST, FFIRST, FRUN, FSTAND, FFERMI,
     1    FDEBUG, FTRACK, FSHORT, FMILNE, FMODPT,
     2    FSTOR, FPMOD, FPENV, FPATM, FDYN,
     3    FLLDAT, FSNU, FSCOMP, FKUR, 
     4    FMHD1, FMHD2, FMHD3, FMHD4, FMHD5, FMHD6, FMHD7, FMHD8
      COMMON/LUOUT/ILAST,IDEBUG,ITRACK,ISHORT,IMILNE,IMODPT,ISTOR,IOWR
C DBGLAOL
      COMMON/NWLAOL/OLAOL, OXA, OT, ORHO, TOLLAOL,
     *  IOLAOL, NUMOFXYZ, NUMRHO, NUMT, LLAOL, LPUREZ, IOPUREZ,
     *  FLAOL, FPUREZ
      COMMON/CENV/TRIDT,TRIDL,SENV0,LSENV0,LNEW0
      COMMON/CKIND/RESCAL(4,50),NMODLS(50),IRESCA(50),LFIRST(50),
     1     NUMRUN
      COMMON/COMP/XENV,ZENV,ZENVM,AMUENV,FXENV(12),XNEW,ZNEW,STOTAL,
     *     SENV
      COMMON/COMP2/YENV,Y3ENV
      COMMON/CONST/CLSUN,CLSUNL,CLNSUN,CMSUN,CMSUNL,CRSUN,CRSUNL,CMBOL
      COMMON/CONST1/ CLN,CLNI,C4PI,C4PIL,C4PI3L,CC13,CC23,CPI
      COMMON/CONST2/CGAS,CA3,CA3L,CSIG,CSIGL,CGL,CMKH,CMKHN
      COMMON/CONST3/CDELRL,CMIXL,CMIXL2,CMIXL3,CLNDP,CSECYR
      COMMON/ENVPRT/EP,ET,ER,ES,ED,EO,EBETA,EDEL(3),EFXION(3),EVEL
      COMMON/FLAG/LEXCOM
      COMMON/HEFLSH/LKUTHE
      COMMON/OLDMOD/HPO(JSON),HTO(JSON),HRO(JSON),HLO(JSON),HDO(JSON),
     *     HCOMPP(15,JSON),HSS(JSON),LCO(JSON),LCZO(JSON),TEFFLO,MO
      COMMON/OLDROT/WOLD(JSON),HJX(JSON),HIO(JSON),HGO(JSON),R0X(JSON),
     *     ETA2X(JSON)
      COMMON/OPTAB/OPTOL,ZSI,IDT,IDD(4)
      COMMON/ROT/WNEW,WALPCZ,ACFPFT,ITFP1,ITFP2,LROT,LINSTB,LWNEW
      COMMON/MHD/LMHD,IOMHD1,IOMHD2,IOMHD3,IOMHD4,IOMHD5,IOMHD6,
     1     IOMHD7, IOMHD8
      COMMON/CORE/LCORE,MCORE,FCORE
C DBG 7/92 COMMON BLOCK ADDED TO COMPUTE DEBYE-HUCKEL CORRECTION.
      COMMON/DEBHU/CDH,ETADH0,ETADH1,ZDH(18),XXDH,
     1     YYDH,ZZDH,DHNUE(18),LDH
      COMMON/DPMIX/DPENV,ALPHAC,ALPHAE,ALPHAM,BETAC,IOV1,IOV2,
     *     IOVIM, LOVSTC, LOVSTE, LOVSTM, LSEMIC, LADOV, LOVMAX
      DIMENSION TLUMX(8),TRIL(3),TRIT(3),PS(3),TS(3),RS(3),CFENV(9),
     *HS(JSON),HL(JSON),HR(JSON),HP(JSON),HT(JSON),HD(JSON),LC(JSON),
     *HCOMP(15,JSON),OMEGA(JSON),HS1(JSON),HS2(JSON),QIW(JSON),
     *ETA2(JSON),FP(JSON),FT(JSON),HI(JSON),HJM(JSON),R0(JSON),
     * HKEROT(JSON),HG(JSON),ATOMWT(12),V(12),DUM1(4),
     * DUM2(3),DUM3(3),DUM4(3),FXION(3)
C     MHP 10/24 ENSURE THAT ONLY HOMOGENEOUS MODELS HAVE THE MIXTURE ALTERED
      REAL*8 TESTMIX(15)
C OPACITY COMMON BLOCKS - modified 3/09
      COMMON /NEWOPAC/ZLAOL1,ZLAOL2,ZOPAL1,ZOPAL2, ZOPAL951,
     +       ZALEX1, ZKUR1, ZKUR2,TMOLMIN,TMOLMAX,LALEX06,  
     +       LLAOL89,LOPAL92,LOPAL95,LKUR90,LALEX95,L2Z 
      COMMON /ALEXO/OPECALEX,IALXO
      COMMON /ALEXMIX/XALEX,ZALEX
C DBG 1/96 VNEW REPLACES V
      COMMON/VNEWCB/VNEW(12)
C MHP  5/97 ADDED COMMON BLOCK FOR SCV EOS TABLES
      COMMON/SCVEOS/TLOGX(NTS),TABLEX(NTS,NPS,12),
     *TABLEY(NTS,NPS,12),SMIX(NTS,NPS),TABLEZ(NTS,NPS,13),
     *TABLENV(NTS,NPS,12),NPTSX(NTS),LSCV,IDTT,IDP
C MHP 10/98 ADDED HPTTOL FOR CHANGING CORE FITTING POINT
      COMMON/CTOL/HTOLER(5,2),FCORR0,FCORRI,FCORR,HPTTOL(12),
     1     NITER1,NITER2,NITER3
C MHP 07/02 ADDED FOR ENVELOPE INTEGRATION WHEN CHANGING THE
C OUTER FITTING POINT
      COMMON/INTENV/ENVERR,ENVBEG,ENVMIN,ENVMAX
C MHP 07/02 STORE CONTENTS OF ENVELOPE INTEGRATION INTO A
C SET OF VECTORS, WHICH ARE FLIPPED AND CONVERTED INTO AN ASCENDING
C SERIES AFTER THE INTEGRATION IS DONE.
      COMMON/ENVSTRUCT/ENVP(JSON),ENVT(JSON),ENVS(JSON),ENVD(JSON),
     *                 ENVR(JSON),ENVX(JSON),ENVZ(JSON),LCENV(JSON),
     *                 NUMENV,EDELS(3,JSON),EVELS(JSON),EBETAS(JSON)
C LLP  3/19/03 Add COMMON block /I2O/ for info directly transferred from
C      input to output model - starting with a code for th initial model 
C      compostion (COMPMIX)
      COMMON /I2O/ COMPMIX     
C G Somers 10/14, Add spot common block
      COMMON/SPOTS/SPOTF,SPOTX,LSDEPTH
      COMMON/OVRTRN/LNEWTCZ,LCALCENV,TAUCZ,TAUCZ0,PPHOT,PPHOT0,FRACSTEP
C G Somers END
C MHP 10/24 ADDED NEW CONTROLS FOR ALTERING THE CNO MASS FRACTIONS
C ISOTOPIC RATIOS(C,N,O) AND D/HE3/LI/BE/B ABUNDANCES.
C THESE CONTROLS ONLY ALTER THE MIXTURE IN THE STARTING MODEL AND ONLY
C IF THE MODEL IS CHEMICALLY UNEVOLVED. POSTPROCESSING TOOLS SHOULD BE USED FOR THE
C CORE HE BURNING PHASE.
c      COMMON/NEWCMP/XNEWCP,INEWCP,LNEWCP,LREL,ANEWCP
      COMMON/NEWCMP/XNEWCP,INEWCP,LNEWCP,LREL
      COMMON/NEWMX/ISETMIX,ISETISO,LMIXTURE,LISOTOPE,FRAC_C,FRAC_N,
     * FRAC_O,R12_13,R14_15,R16_17,R16_18,ZXMIX,
     * XH2_INI,XHE3_INI,XLI6_INI,XLI7_INI,XBE9_INI,XB10_INI,XB11_INI
      DATA ATOMWT/23.0D0,26.99D0,24.32D0,55.86D0,28.1D0,12.015D0,
     * 1.008D0,16.0D0,14.01D0,39.96D0,20.19D0,4.004D0/
      COMMON/SCRTCH/SESUM(JSON),SEG(7,JSON),SBETA(JSON),SETA(JSON),
     * LOCONS(JSON),SO(JSON),SDEL(3,JSON),SFXION(3,JSON),SVEL(JSON)
      
      SAVE

      
C If flag LARGE is set, model has failed to converge.  Terminate the run.      
      IF(LARGE) THEN
	    WRITE(ISHORT,1000)
 1000       FORMAT(1X,39('>'),40('<')/,
     *            "STARIN:        ***** RUN STOPPED *****")
	    WRITE(ISHORT,1010)
 1010       FORMAT("STARIN: ***** MODEL FAILED TO CONVERGE *****")
  	    STOP
      ENDIF

C THIS SUBROUTINE READS IN THE INITIAL STELLAR MODEL
C INITIAL MODEL IS STORED IN LOGICAL UNIT IFIRST

C Set flags for reading an input model
      IKUT = 0
      IREAD = IFIRST
      
C INITIALIZE VARIABLES
      VEL = 0.0D0
      QDT = -1.0D0
      QDP = 1.0D0
      
C Flag LFIRST(NK) tells where to get the starting stellar model for the current
C step (step NK).  If LFIRST(NK) is true, read in the starting stellarmodel from 
C the file specified by LU IFIRST.  If LFIRST(NK) is false, as starting model use
C the stellar model currently stored in memory.      

      IF(.NOT.LFIRST(NK)) THEN
C Use the model currently in memory as the starting model.      
C DBG 2/92 CHANGED SO WILL RESCALE ENVELOPE MASS ON EACH NEW RUN
         IF(IRESCA(NK).NE.1) CALL RSCALE(HL,HCOMP,HS,HSTOT,M,NK,
     *      SMASS,LC)
C Now skip over the reading and processing of an input model file         
         GOTO 3000
      ENDIF


C     Read in the starting model from LU IFIRST and process it.

C  Get file format of input model

      REWIND IREAD
      READ(IREAD,10) ATEMP
 10   FORMAT(A4)

C ATEMP now contains a keyword describing the format of the input stellar 
C model.  We decide what kind of model format it has and process accordingly.

      IF(ATEMP .EQ. 'NMOD') THEN
         WRITE(ISHORT,12)
 12      FORMAT('STARIN:  Input model has YREC7 format')
         CALL GETYREC7(BL,CFENV,CMIXL0,DAGE,DDAGE,FTRI,HCOMP,HD,HL,
     *    HP,HR,HS,HSTOT,HT,IREAD,ISHORT,JCORE0,JENV0,LC,LEXCOM0,
     *    LROT0,M,MODEL,OMEGA,PS,RS,SMASS,TEFFL,TLUMX,TRIL,TRIT,TS,
     &    ATM,EOS,HIK,LDIFY0,LDIFZ0,LDISK0,LINSTB0,LJDOT00,LOK,
     &    LOVSTC0,LOVSTE0,LOVSTM0,LPUREZ0,LSEMIC0,COMPMIX,PDISK0,
     &    TDISK0,WMAX0)
C First three lines above are YREC7 inputs
C Last three lines are MODEL2 add-ons

      ELSE IF(ATEMP .EQ. 'MOD2 ') THEN
         WRITE(ISHORT,16)
 16      FORMAT('STARIN:  Input model has MODEL2 format')
         CALL GETMODEL2(BL,CFENV,CMIXL0,DAGE,DDAGE,FTRI,HCOMP,HD,HL,
     *    HP,HR,HS,HSTOT,HT,IREAD,ISHORT,JCORE0,JENV0,LC,LEXCOM0,
     *    LROT0,M,MODEL,OMEGA,PS,RS,SMASS,TEFFL,TLUMX,TRIL,TRIT,TS,
     &    ATM,EOS,HIK,LDIFY0,LDIFZ0,LDISK0,LINSTB0,LJDOT00,LOK,
     &    LOVSTC0,LOVSTE0,LOVSTM0,LPUREZ0,LSEMIC0,COMPMIX,PDISK0,
     &    TDISK0,WMAX0)
C First three lines above are YREC7 inputs
C Last three lines are MODEL2 add-ons

      ELSE
         WRITE(ISHORT,20)
 20      FORMAT('STARIN: ***** RUN TERMINATED, INVALID INPUT',
     *         ' MODEL FILE.  *****')
         STOP
      ENDIF

C Model has now been read in. Some post-processing is required.

      DELTS = CSECYR*DDAGE
      DELTSH = DABS(DELTS)
      STOTAL = HSTOT

C CHECK TO ENSURE THAT MIX LENGTH, SURFACE B.C. AND CONVECTION ZONE
C THEORY OF THE MODEL ARE THE SAME AS USER PARAMETERS
C CHECKED ONLY FOR EVOLVED MODELS(MODEL NUMBER > 0)
C 1/92 Changed to not stop just give warning.
      IF(MODEL.GT.0) THEN
	 LMIXL = .TRUE.
C Jan 12, 1989 : in STARIN changed test to see if model has correct mixing
C length from 1.0e-6 to 2.0e-3 because models only store
C mixing length to four sig digits.
	 IF(CMIXL0.GT.0.0D0) LMIXL = (DABS(CMIXL-CMIXL0).LT.2.0D-3)
C MHP 9/03 FIXED TYPO
	 IF(.NOT.LMIXL .OR. LEXCOM0.NEQV.LEXCOM) THEN
	    WRITE(ISHORT,1040) CMIXL,CMIXL0,LEXCOM,LEXCP0
	    WRITE(IOWR,1040) CMIXL,CMIXL0,LEXCOM,LEXCP0
 1040       FORMAT(1X,'ERROR IN SUBROUTINE STARIN'/1X,'USER PARAMETERS',
     *      ' OF WRONG TYPE FOR INITIAL MODEL'/1X,'MIXING LENGTH - USER'
     *      ,' DESIRES',F7.3,' MODEL MIX LENGTH',F7.3/1X,
     *      'EXTENDED COMP-USER DESIRES ',L1,' MODEL USED ',L1)
C =>RUN STOPPED DUE TO INCONSISTENCY BETWEEN MODEL AND RUN PARMS
c            STOP
	 ENDIF
      ENDIF

C ENVELOPE DATA (Now bypassed)
C LNEW0 HAS BEEN READ IN, IF TRUE THEN RECOMPUTE ENVELOPE EVERY MODEL
C STORED ENVELOPE RECORDS ONLY USED FOR HE FLASH CALCS
c      IF(LNEW0) THEN
c	 LNEW = .TRUE.
c      ELSE
c	 LNEW = .NOT.LKUTHE
c      ENDIF
c      DO 80 I = 1,3
c	 IF((.NOT.LNEW).AND.IABS(IO).NE.I) LNEW = .TRUE.
c 80   CONTINUE

      ISTORE = 0
      FTRI = 1.0D0
c Require recompute of envelope. No assurance of reliable 
c input triangle
       LNEW = .TRUE.
       

C GET XNEW AND ZNEW FROM HENYEY POINTS

      XNEW = HCOMP(1,M)
      ZNEW = HCOMP(3,M)

C FOURTH PART:  - LOG J/M STORED

      IF(LROT) THEN
	 IF(LWNEW) THEN
C GENERATE A SOLID BODY ROTATION CURVE WITH OMEGA = WNEW;
C THIS IS DONE TO CONVERT A NON-ROTATING MODEL TO A ROTATING ONE.
	    DO 540 I = 1,M
	       OMEGA(I) = WNEW
 540        CONTINUE
	 ENDIF
      ELSE
         DO 570 I = 1,JSON
            FP(I) = 1.0D0
            FT(I) = 1.0D0
 570     CONTINUE
      ENDIF
C KEEP IREAD OPEN
      REWIND IREAD
C End of the reading and processing of an input model file.      
      IF(.NOT.LFIRST(NK))GOTO 3000
C      IF(.NOT.LFIRST(NK).OR.NK.GT.1)GOTO 3000
C     MHP 10/24 MACHINERY TO ALTER THE HEAVY ELEMENT MIXTURE
C     THIS IS ONLY DONE if the first MODEL IS being READ IN, AND ONLY FOR A
C CHEMICALLY HOMOGENEOUS MODEL. IT CAN OVER-WRITE MASS FRACTIONS 4-15 WITH USER-SPECIFIED VALUES
C ISETMIX=1 -> CAN ADJUST CNO FRACTIONS ISETISO=1-> CHANGE ISOTOPE RATIOS
      IF(LMIXTURE .OR. LISOTOPE)THEN
C ENSURE STARTING MODEL IS HOMOGENEOUS BEFORE EITHER IS CHANGED
         DO I = 1,15
            TESTMIX(I)=HCOMP(I,1)
         END DO
         DO J = 2,M
            DO I = 1,15
               TEST = ABS(HCOMP(I,J)-TESTMIX(I))
               IF(TEST.GT.1.0D-6)THEN
                  WRITE(*,592)I,J,TEST
                  WRITE(ISHORT,592)I,J,TEST
 592              FORMAT('SPECIES ',I3,' IN SHELL ',I5,
     *              ' DIFFERS FROM CENTER BY ',E12.4,
     *              ' MIX NOT MODIFIED IN EVOLVED MODEL')
                  GOTO 602
               ENDIF
            END DO
         END DO
      ENDIF
C LOOP FOR CHANGING CNO MIX
      IF(LMIXTURE)THEN
C     INFER CURRENT TOTAL CNO FRACTIONS AND SCALE ALL ISOTOPES BY THE RATIO BETWEEN
C     DESIRED AND CURRENT FRACTIONS. RELATIVE ISOTOPES ARE ADJUSTED IN THE ISOTOPE SECTION BELOW.
         TOT_C = (TESTMIX(5)+TESTMIX(6))/TESTMIX(3)
         TOT_N = (TESTMIX(7)+TESTMIX(8))/TESTMIX(3)
         TOT_O = (TESTMIX(9)+TESTMIX(10)+TESTMIX(11))/TESTMIX(3)
         RAT_C = FRAC_C/TOT_C
         RAT_N = FRAC_N/TOT_N
         RAT_O = FRAC_O/TOT_O
         WRITE(*,*)FRAC_C,FRAC_N,FRAC_O
         DO I = 5,6
            DO J = 1,M
               HCOMP(I,J)=RAT_C*HCOMP(I,J)
            END DO
         END DO
         DO I = 7,8
            DO J = 1,M
               HCOMP(I,J)=RAT_N*HCOMP(I,J)
            END DO
         END DO
         DO I = 9,11
            DO J = 1,M
               HCOMP(I,J)=RAT_O*HCOMP(I,J)
            END DO
         END DO
         WRITE(*,594)(TESTMIX(K),K=5,11),(HCOMP(K,1),K=5,11)
         WRITE(ISHORT,594)(TESTMIX(K),K=5,11),(HCOMP(K,1),K=5,11)
 594     FORMAT('CNO MIX CHANGED IN STARIN. OLD C12 C13 N14'
     *   ' N15 O16 O17 O18 ',7E12.4,' NEW ',7E12.4)
      ENDIF
C DESIRED ISOTOPE RATIOS AND LIGHT ELEMENT ABUNDANCES ASSIGNED.
C     AT PRESENT B10,B11,N15,O17 ARE NOT USED AND THUS NOT ALTERED.
C     START WITH LIGHT ELEMENTS
      IF(LISOTOPE)THEN
         SUM_C = HCOMP(5,1)+HCOMP(6,1)
         SUM_O = HCOMP(9,1)+HCOMP(11,1)
         DO J = 1,M
            HCOMP(4,J)=XHE3_INI
            HCOMP(5,J)= R12_13*SUM_C/(1.0D0+R12_13)
            HCOMP(6,J)= SUM_C/(1.0D0+R12_13)
            HCOMP(9,J)= R16_18*SUM_O/(1.0D0+R16_18)
            HCOMP(11,J)= SUM_O/(1.0D0+R16_18)
            HCOMP(12,J)=XH2_INI
            HCOMP(13,J)=XLI6_INI
            HCOMP(14,J)=XLI7_INI
            HCOMP(15,J)=XBE9_INI
         END DO
         WRITE(*,593)(TESTMIX(K),K=4,15),(HCOMP(K,1),K=4,15)
         WRITE(ISHORT,593)(TESTMIX(K),K=4,15),(HCOMP(K,1),K=4,15)
 593     FORMAT('CNO ISOTOPES AND LIGHT ELEMENTS CHANGED IN ',
     *        'STARIN. OLD HE3 C12 C13 N14 N15 O16 O17 O18 H2 LI6 ',
     *         'LI7 BE9',12E12.4,' NEW ',12E12.4)
      ENDIF
 602  CONTINUE
 3000 CONTINUE

C     The following code enables us to extend the model from the current 
C     inner most shell to a point ncloser to center, if flag LCORE is set.
C 9/98 MHP REPLACE AS FOLLOWS:
C ADD INTEGER NUMBER OF POINTS USING THE DESIRED SPACING IN MASS,HPTTOL.  
C USE STELLAR STRUCTURE EQUATIONS CONSISTENT WITH THE ASSUMPTIONS
C IN THE MODEL, NAMELY CONSTANT ENERGY GENERATION RATE AND DENSITY
C INTERIOR TO THE LOCATION OF THE CENTRAL FITTING POINT.
C MHP 9/14 CHANGED SO THAT MOVING THE CORE FITTING IS ATTACHED TO ANY RUN
C WHICH READS IN THE STARTING MODEL; THIS AVOIDS OVER-WRITING THE CHANGE
C IN AUTO-CALIBRATED SOLAR MODELS
      IF(LCORE .AND. LFIRST(NK)) THEN
C      IF(LCORE .AND. NK .EQ. 1) THEN
C AVOID SHUFFLING POINTS BY ASSIGNING NEW CENTRAL POINTS IN INTEGER
C MULTIPLES OF THE CENTRAL POINT SPACING.
C     MCORE is number of shells to extrapolate to new core.
C     FCORE is factor to reduce inner mass shell.
          MCORE = INT(DLOG10(FCORE)/HPTTOL(2))+1
          FCORE = DBLE(MCORE)*HPTTOL(2)
          MN = M + MCORE
          IF(MN .GT. JSON) THEN
             WRITE(ISHORT,476)"STARIN: Unable to extend core inward ",
     *             "- JSON too small"
             WRITE(ISHORT,477) "STARIN: Required size =", MN,
     *              ", JSON = ", JSON
             WRITE(ISHORT,478) "STARIN:  ***** RUN TERMINATED *****"
  476        FORMAT(2A)
  477        FORMAT(A, I8, A, I8)                   
  478        FORMAT(A)
          ENDIF
          DS = HPTTOL(2)
c shift data for remaining points by the required number
          DO I=M,1, -1
             HS(I+MCORE) = HS(I)
             HR(I+MCORE) = HR(I)
             HL(I+MCORE) = HL(I)
             HP(I+MCORE) = HP(I)
             HT(I+MCORE) = HT(I)
             LC(I+MCORE) = LC(I)
             DO J=1, 15
                HCOMP(J,I+MCORE) = HCOMP(J,I)
             END DO
             OMEGA(I+MCORE) = OMEGA(I)
          END DO   
          MP1 = MCORE+1
C MARCH INWARD IN MASS FROM THE INNERMOST MODEL POINT.
C ASSUME EPSILON=CONSTANT AND DEL=CONSTANT
          RHOC = HD(1)
          DEL = (HT(2)-HT(1))/(HP(2)-HP(1))
          HLC = HL(1)
C MHP 4/12 FACTOR FOR ESTIMATING RHO FROM P AND T
          FACD = HP(MP1)-HD(MP1)-HT(MP1)
          DO I = MCORE,1,-1
             HS(I) = HS(I+1)-DS
C USE M  = 4PI/3*RHOC*R**3 TO GET R AS A FUNCTION OF M
             HR(I) = CC13*(HS(I)-C4PI3L-RHOC)
C USE EPSILON=CONSTANT TO GET L
             HL(I) = EXP(CLN*(HS(I)-HS(MP1)))*HLC
C USE HYDROSTATIC EQUILIBRIUM TO GET P
             PP = HP(I+1)
             TEMP = EXP(CLN*(CGL+2.0D0*HS(I)-C4PIL-PP-4.0D0*HR(I)))
             PP = PP+0.5D0*TEMP*DS
             TEMP = EXP(CLN*(CGL+2.0D0*HS(I)-C4PIL-PP-4.0D0*HR(I)))
             HP(I) = HP(I+1)+TEMP*DS
C ASSUME R/C FLAG IS THE SAME AS FOR THE FIRST POINT
             LC(I) = LC(MP1)
C ASSUME DEL= CONSTANT IN THE CORE
             HT(I) = HT(I+1)+TEMP*DEL*DS
C ASSUME OMEGA = CONSTANT
             OMEGA(I) = OMEGA(MP1)
C ASSUME COMPOSITION IS UNIFORM
             DO J=1, 15
                HCOMP(J,I) = HCOMP(J,MP1)
             END DO
C CALL EQUATION OF STATE TO GET CONSISTENT DENSITY
C	     LDERIV = .FALSE.
C	     LOCOND = .FALSE.
C	     LATMO = .FALSE.
C             KSAHA = 0
C	     X = HCOMP(1,I)
C	     Z = HCOMP(3,I)
C	     PL = HP(I)
C             P = EXP(CLN*PL)
C             TL = HT(I)
C             T = EXP(CLN*TL)
C	     DL = HD(I+1)
C             D = EXP(CLN*DL)
C	     FPL = 1.0D0
C	     FTL = 1.0D0
C	     CALL EQSTAT(TL,T,PL,P,DL,D,X,Z,BETA,BETAI,BETA14,FXION,
C     *                   RMU,AMU,EMU,ETA,QDT,QDP,QCP,DELA,QDTT,QDTP,
C     *                   QAT,QAP,QCPT,QCPP,LDERIV,LATMO,KSAHA)
C             HD(I) = DL
C MHP 4/12 REPLACED (BROKEN) CALL TO EQSTAT WITH LOCAL ESTIMATE FOR RHO
             HD(I) = HP(I) - HT(I) - FACD
          END DO
          M = MN
      END IF
C End of code to extend core inward

C PERFORM RESCALING OF FIRST MODEL IF REQUIRED
      IF(IRESCA(NK).NE.1) CALL RSCALE(HL,HCOMP,HS,HSTOT,M,NK,
     *      SMASS,LC)

C What is the metallicity of your model? (surface X and Z)
C put in SETUPOPAC here, and take out of setups.
C DBG 2/92 CHANGED SO THAT WORKS ON FIRST MODEL OF EACH NEW RUN
C CHANGE FITTING POINT OF THE ENVELOPE INTEGRATION IF REQUESTED;
C PROCEDURE IS:
C IF THE REQUESTED ENVELOPE MASS(SENV0) IS GREATER THAN THE
C CURRENT ONE, DELETE POINTS UNTIL THE MASS IS EQUAL.
C LINEAR INTERPOLATION BETWEEN THE LAST POINT ABOVE THE FITTING
C MASS AND THE FIRST POINT BELOW IT IS USED;COMPOSITION IS
C ASSUMED EQUAL TO THE LAST OLD POINT BELOW THE NEW FITTING POINT.
C IF THE REQUESTED ENVELOPE MASS IS SMALLER THAN THE CURRENT ONE,
C AN ENVELOPE WITH TEFF AND L EQUAL TO THE STORED MODEL VALUE
C IS INTEGRATED FROM THE SURFACE TO THE DESIRED FITTING POINT.
C 1 NEW POINT IS ADDED, AND THE COMPOSITION OF THE NEW POINT
C IS ASSUMED EQUAL TO THAT OF THE LAST OLD POINT.
      IF(LSENV0) THEN
	 IF(SENV0.GT.0.0D0) SENV0 = -SENV0
C DBG 2/92 CHANGED MINIMUM FROM 1.0D-10 TO 1.0D-12
C RESTRICT MIMIMUM ENVELOPE MASS;1.0D-12 CORRESPONDS TO TAU=2/3
C FOR THIS PURPOSE(BASE OF ATMOSPHERE).
	 IF(SENV0.GT.-1.0D-12) SENV0 = -1.D-12
	 SENV = HS(M) - HSTOT
	 SENV1 = SENV
	 IF(SENV.EQ.SENV0) GOTO 599
	 JEND = 11
	 IF(LEXCOM) JEND = 15
	 IF(SENV0.LT.SENV) THEN
C NEW ENVELOPE DEEPER THAN THE OLD ONE
	    HSEND = HSTOT + SENV0
	    DO 575 I = M-1,1,-1
	       IF(HS(I).LT.HSEND)GOTO 580
 575        CONTINUE
C ENVELOPE MASS DESIRED WITHIN FIRST POINT;PRINT NASTY MESSAGE
C AND ABORT.
	    WRITE(ISHORT,576)SENV0
 576        FORMAT(5X,'ERROR IN SUBROUTINE STARIN'/5X,'DESIRED',
     *      ' ENVELOPE MASS',1PE22.13,' TOO LARGE'/5X,'ENVELOPE',
     *      ' MASS NOT CHANGED')
	    GOTO 599
 580        M = I + 1
	    SENV = SENV0
	    FS = (HSEND - HS(I))/(HS(I+1) - HS(I))
	    HS(M) = HSEND
	    HD(M) = HD(I) + FS*(HD(I+1) - HD(I))
	    HL(M) = HL(I) + FS*(HL(I+1) - HL(I))
	    HP(M) = HP(I) + FS*(HP(I+1) - HP(I))
	    HR(M) = HR(I) + FS*(HR(I+1) - HR(I))
	    HT(M) = HT(I) + FS*(HT(I+1) - HT(I))
	    DO 585 J = 1,JEND
	       HCOMP(J,M) = HCOMP(J,I)
 585        CONTINUE
	    XNEW = HCOMP(1,M)
	    ZNEW = HCOMP(3,M)
	    IF(LROT) OMEGA(M) = OMEGA(I) + FS*(OMEGA(I+1)-OMEGA(I))
	    IF(LC(I).AND.LC(I+1))THEN
	       LC(M) = .TRUE.
	    ELSE IF(.NOT.LC(I).AND. .NOT.LC(I+1))THEN
	       LC(M) = .FALSE.
	    ELSE
C CALL BASIC PHYSICS ROUTINES TO DETERMINE IF THE NEW LAST SHELL IS
C CONVECTIVE OR RADIATIVE.
	       LDERIV = .FALSE.
	       LOCOND = .FALSE.
	       LATMO = .TRUE.
	       KSAHA = 0
	       X = HCOMP(1,M)
	       Z = HCOMP(3,M)
	       PL = HP(M)
	       TL = HT(M)
	       DL = HD(M)
	       B = HL(M)
	       RL = HR(M)
	       SL = HS(M)
	       FPL = 1.0D0
	       FTL = 1.0D0
	       IDT = 15
	       DO 588 KK = 1,4
		  IDD(KK) = 5
 588           CONTINUE
               IF (LMHD) THEN
                  CALL MEQOS(TL,T,PL,P,DL,D,X,Z,BETA,BETAI,BETA14,
     *                 FXION,RMU,AMU,EMU,ETA,QDT,QDP,QCP,DELA,QDTT,
     *                 QDTP,QAT,QAP,QCPT,QCPP,LDERIV,LATMO,KSAHA)
               ELSE 
                  IF (LDH) THEN
                     XXDH = HCOMP(1,M)
                     YYDH = HCOMP(2,M)+HCOMP(4,M)
                     ZZDH = HCOMP(3,M)
                     ZDH(1) = HCOMP(5,M)+HCOMP(6,M)
                     ZDH(2) = HCOMP(7,M)+HCOMP(8,M)
                     ZDH(3) = HCOMP(9,M)+HCOMP(10,M)+HCOMP(11,M)
                  END IF
                  CALL EQSTAT(TL,T,PL,P,DL,D,X,Z,BETA,BETAI,BETA14,
     *                 FXION,RMU,AMU,EMU,ETA,QDT,QDP,QCP,DELA,QDTT,
     *                 QDTP,QAT,QAP,QCPT,QCPP,LDERIV,LATMO,KSAHA)
               END IF
               CALL GETOPAC(DL, TL, X, Z, O, OL, QOD, QOT, FXION)
               IOVIM = -1
               CALL TPGRAD(TL,T,PL,P,D,RL,SL,B,O,QDT,QDP,QOT,QOD,
     *              QCP,DEL,DELR,DELA,QDTT,QDTP,QAT,QAP,QACT,QACP,
     *              QACR,QCPT,QCPP,VEL,LDERIV,LCONV,FPL,FTL,TEFFL)
               HD(M) = DL
               LC(M) = LCONV
	    ENDIF
	 ELSE
C DESIRED ENVELOPE MASS LESS THAN CURRENT VALUE.
            MM = M
            EMAX0 = ENVMAX
            EMIN0 = ENVMIN
            EBEG0 = ENVBEG
            ENVMAX = HPTTOL(8)
            ENVMIN = HPTTOL(8)
            ENVBEG = HPTTOL(8)
C	    SENV = SENV0
	    LSBC0 = .FALSE.
	    LPRT = .TRUE.
	    KATM = 0
	    KENV = 0
	    KSAHA = 0
	    B = DEXP(CLN*BL)
	    RL = 0.5D0*(BL + CLSUNL - 4.0D0*TEFFL - C4PIL - CSIGL)
	    GL = CGL + STOTAL - RL - RL
	    X = HCOMP(1,M)
	    Z = HCOMP(3,M)
	    FPL = 1.0D0
	    FTL = 1.0D0
	    IXX=0
	    PLIM = HP(M)
C DBG PULSE: DO NOT DO PULSE OUTPUT
            LPULPT = .FALSE. 
            IF (LDH) THEN
               XXDH = HCOMP(1,M)
               YYDH = HCOMP(2,M)+HCOMP(4,M)
               ZZDH = HCOMP(3,M)
               ZDH(1) = HCOMP(5,M)+HCOMP(6,M)
               ZDH(2) = HCOMP(7,M)+HCOMP(8,M)
               ZDH(3) = HCOMP(9,M)+HCOMP(10,M)+HCOMP(11,M)
            END IF
C MHP 10/02  define ISTORE - used in ENVINT
            IDUM = 0
C G Somers 10/14, FOR SPOTTED RUNS, FIND THE
C PRESSURE AT THE AMBIENT TEMPERATURE ATEFFL
	    IF(JENV.EQ.M.AND.SPOTF.NE.0.0.AND.SPOTX.NE.1.0)THEN
               ATEFFL = TEFFL - 0.25*LOG10(SPOTF * SPOTX**4.0 + 1.0 - SPOTF)
	    ELSE
	       ATEFFL = TEFFL
	    ENDIF
	    CALL ENVINT(B,FPL,FTL,GL,HSTOT,IXX,LPRT,LSBC0,PLIM,RL,
     *           ATEFFL,X,Z,DUM1,IDUM,KATM,KENV,KSAHA,DUM2,
     *           DUM3,DUM4,LPULPT)
C G Somers END
            ENVMAX = EMAX0
            ENVMIN = EMIN0
            ENVBEG = EBEG0
	    SENV = SENV0
            IF(M+NUMENV.GE.JSON) STOP 9999
C ENFORCE CONSISTENCY WITH THE INTERIOR SOLUTION;
C ADJUST THE (P, RHO, T, R) POINTS TO BE CONSISTENT
C WITH THE LAST MODEL POINT.
            DP = HP(M) - ENVP(1)
            DD = HD(M) - ENVD(1)
            DT = HT(M) - ENVT(1)
            DR = HR(M) - ENVR(1)
            DO J = 1,NUMENV - 1
               ENVD(J) = ENVD(J+1)+DD
               ENVP(J) = ENVP(J+1)+DP
               ENVR(J) = ENVR(J+1)+DR
               ENVS(J) = ENVS(J+1)
               ENVT(J) = ENVT(J+1)+DT
               ENVX(J) = ENVX(J+1)
               ENVZ(J) = ENVZ(J+1)
            END DO
            NUMENV = NUMENV - 1
            DO J = M+1,M+NUMENV
               JM = J-M
C LUMINOSITY ASSUMED CONSTANT
               HL(J) = HL(M)
C INCLUDE NEW POINTS UP TO THE DIFFERENT DESIRED FITTING POINT
               IF(ENVS(JM).LE.SENV)THEN
                  HD(J) = ENVD(JM)
                  HP(J) = ENVP(JM)
                  HR(J) = ENVR(JM)
                  HS(J) = ENVS(JM) + STOTAL
                  HT(J) = ENVT(JM)
                  HCOMP(1,J) = ENVX(JM)
                  HCOMP(3,J) = ENVZ(JM)
                  DO K = 4,JEND
                     HCOMP(K,J) = HCOMP(K,M)
                  END DO
                  HCOMP(2,J)=1.0D0-HCOMP(1,J)-HCOMP(3,J)-HCOMP(4,J)
                  LC(J) = LCENV(JM)
               ELSE
C POINTS BEYOND THIS ARE ABOVE THE NEW DESIRED FITTING POINT;
C INTERPOLATE LINEARLY, SET NEW NUMBER OF TOTAL POINTS, AND EXIT
                  IF(JM.EQ.1)THEN
C INTERPOLATE BETWEEN THE LAST INTERIOR POINT AND THE FIRST ENVELOPE POINT
                     X0 = HS(M)
                     X1 = STOTAL + SENV
                     X2 = ENVS(JM) + STOTAL
                     IF(X2-X0.LT.1.0D-14) STOP 9998
                     FX = (X1-X0)/(X2-X0)
                     HD(J) = HD(M)+FX*(ENVD(JM)-HD(M))
                     HP(J) = HP(M)+FX*(ENVP(JM)-HP(M))
                     HR(J) = HR(M)+FX*(ENVR(JM)-HR(M))
                     HS(J) = X1
                     HT(J) = HT(M)+FX*(ENVT(JM)-HT(M))
                     HCOMP(1,J) = HCOMP(1,M)+FX*(HCOMP(1,M)-ENVX(JM))
                     HCOMP(3,J) = HCOMP(3,M)+FX*(HCOMP(3,M)-ENVZ(JM))
                     DO K = 4,JEND
                        HCOMP(K,J) = HCOMP(K,M)
                     END DO
                     HCOMP(2,J)=1.0D0-HCOMP(1,J)-HCOMP(3,J)-HCOMP(4,J)
                     IF(LCENV(JM).OR.LC(M))THEN
                        LC(J) = .TRUE.
                     ELSE
                        LC(J) = .FALSE.
                     ENDIF
                  ELSE
C INTERPOLATE BETWEEN THE LAST 2 ENVELOPE POINTS
                     X0 = ENVS(JM-1) + STOTAL
                     X1 = STOTAL + SENV
                     X2 = ENVS(JM) + STOTAL
                     IF(X2-X0.LT.1.0D-14) STOP 9998
                     FX = (X1-X0)/(X2-X0)
                     HD(J) = ENVD(JM-1)+FX*(ENVD(JM)-ENVD(JM-1))
                     HP(J) = ENVP(JM-1)+FX*(ENVP(JM)-ENVP(JM-1))
                     HR(J) = ENVR(JM-1)+FX*(ENVR(JM)-ENVR(JM-1))
                     HS(J) = X1
                     HT(J) = ENVT(JM-1)+FX*(ENVT(JM)-ENVT(JM-1))
                     HCOMP(1,J) = ENVX(JM-1)+FX*(ENVX(JM)-ENVX(JM-1))
                     HCOMP(3,J) = ENVZ(JM-1)+FX*(ENVZ(JM)-ENVZ(JM-1))
                     DO K = 4,JEND
                        HCOMP(K,J) = HCOMP(K,M)
                     END DO
                     HCOMP(2,J)=1.0D0-HCOMP(1,J)-HCOMP(3,J)-HCOMP(4,J)
                     IF(LCENV(JM).OR.LCENV(JM-1))THEN
                        LC(J) = .TRUE.
                     ELSE
                        LC(J) = .FALSE.
                     ENDIF
                  ENDIF
                  M = J
                  GOTO 587
               ENDIF
            END DO
C ASSIGN THE BOUNDARY AT THE PHOTOSPHERE FOR ENVELOPE MASS BELOW 1.0D-12.
            M = M + NUMENV
 587        CONTINUE
            IF(LROT)THEN
               DO J = MM+1,M
                  OMEGA(J) = OMEGA(MM)
                  HJM(J) = CC23*OMEGA(MM)*10.0D0**(2.0D0*HR(J))
               END DO
            ENDIF
            WRITE(*,910)
 910  FORMAT(1X,'NEW INTERIOR POINTS FROM CHANGE IN ENVELOPE MASS'/
     *      ' J,LOG RHO, LOG L, LOG P, LOG R, LOG M, LOG T, CONV T/F')
      WRITE(*,911)(J,HD(J),HL(J),HP(J),HR(J),HS(J)-STOTAL,
     *             HT(J),LC(J), J = MM,M)
 911  FORMAT(I5,1P6E16.8,L2)
C	    M = M + 1
C	    HS(M) = HSTOT + SENV
C	    HD(M) = ED
C	    HL(M) = HL(M-1)
C	    HP(M) = EP
C	    HR(M) = ER
C	    HT(M) = ET
C	    LC(M) = EVEL.GT.0.0D0
C	    DO 590 J = 1,JEND
C	       HCOMP(J,M) = HCOMP(J,M-1)
C 590        CONTINUE
C	    XNEW = HCOMP(1,M)
C	    ZNEW = HCOMP(3,M)
C	    IF(LROT) OMEGA(M) = OMEGA(I) + FS*(OMEGA(I+1)-OMEGA(I))
	 ENDIF
	 LNEW = .TRUE.
	 WRITE(ISHORT,597)SENV1,SENV
 597     FORMAT(5X,'***** NEW ENVELOPE MASS CALCULATED *****'/8X,
     *        'OLD SENV ',1PE22.13,'  NEW SENV',E22.13)
 599     CONTINUE
      ENDIF

C SET UP WEIGHTS AND MASSES
C HS1 IS THE UNLOGGED HS; HS2 IS THE MASS OF THE SHELL(ALSO NOT LOG).
      DS3 = DEXP(CLN*HS(1))
      DS2 = - DS3
      DO 120 I = 2,M
	 DS1 = DS2
	 DS2 = DS3
	 DS3 = DEXP(CLN*HS(I))
	 HS1(I-1) = DS2
	 HS2(I-1) = 0.5D0*(DS3-DS1)
 120  CONTINUE
      HS1(M) = DS3
      HS2(M) = DEXP(CLN*HSTOT) - 0.5D0*(DS2+DS3)
      
      IF(LROT) THEN
C CALCULATE FP,FT,R0 AND ETA2 GIVEN OMEGA
	 CALL FPFT(HD,HR,HS,M,OMEGA,ETA2,FP,FT,HG,R0)
C FIND MOMENT OF INERTIA(HI)
	 CALL MOMI(ETA2,HD,HR,HS,HS2,1,M,OMEGA,R0,HI,QIW,M)
C GIVEN OMEGA AND I, FIND ANGULAR MOMENTUM AND ROTATIONAL K.E.
	 SUMJ = 0.0D0
	 SUMKE = 0.0D0
	 DO 550 I = 1,M
	    HJ = OMEGA(I)*HI(I)
	    HJM(I) = HJ/HS2(I)
	    HKEROT(I) = 0.5D0*OMEGA(I)*HJ
	    SUMJ = SUMJ + HJ
	    SUMKE = SUMKE + HKEROT(I)
 550     CONTINUE
	 WRITE(ISHORT,560)SJTOT,SUMJ,SKEROT,SUMKE
 560     FORMAT(1X,'TOTAL J OF STAR - PREVIOUS ',1PE21.13,' NEW ',
     *        1PE21.13/1X,'TOTAL ROTATIONAL K.E. OF STAR - PREVIOUS ',
     *        1PE21.13,' NEW ',1PE21.13)
	 SJTOT = SUMJ
	 SKEROT = SUMKE
      ENDIF
      
      IF(NK.GT.1) GOTO 630
C SET UP MASS FRACTIONS AND NUMBER FRACTIONS OF ELEMENTS IN 
C ENVELOPE.
C DBG 1/96 V (ENVELOPE MASS FRACTIONS WAS NORMALLY READ IN VIA
C RDLAOL. NOW THAT THESE OPACITIES ARE OBSOLETE VNEW IS INTRODUCED
C HOLD THE RELATIVE MASS FRACTIONS OF THE ELEMENTS (SEE PARMIN).
C TO MAINTAIN BACKWARD COMPATIBILITY IF LLAOL=T THEN USE V READ IN
C VIA RDLAOL OTHERWISE USE VNEW.
      IF (.NOT.LLAOL) THEN 
         DO I=1, 12
            V(I)=VNEW(I)
         END DO
      END IF

C COMPUTE SURFACE MIX VALUES.
C ZENVM = Z OTHER THAN CNO CYCLE ELEMENTS;
C AMUENV = MEAN ATOMIC WEIGHT OF SURFACE Z;
C FXENV = NUMBER DENSITY OF SPECIES .
      XENV = XNEW
      ZENV = ZNEW
      YENV = 1.0D0 - XENV - ZENV - HCOMP(4,M)
      Y3ENV = HCOMP(4,M)
C EVERYTHING BUT V(7)=H, AND V(12)=HE
      VSUM = V(1)+V(2)+V(3)+V(4)+V(5)+V(6)+V(8)+V(9)+V(10)+V(11)
      ZENVM = ZENV*(VSUM -V(6)-V(8)-V(9))/VSUM
      FV = ZENV/VSUM
      V(7) = XENV/FV
      V(12) = (1.0D0-XENV-ZENV)/FV
      VSUM = 0.0D0
      DO 610 I = 1,12
	 V(I) = FV*V(I)/ATOMWT(I)
	 VSUM = VSUM + V(I)
 610  CONTINUE
      AMUENV = VSUM
      FV = 1.0D0/AMUENV
C DBG 1/96 FXENV ARE NUMBER FRACTIONS OF ELEMENTS REQURIED
C BY EOS ROUTINES (SEE EQSTAT AND EQSAHA)
      DO 620 I = 1,12
	 FXENV(I) = V(I)*FV
 620  CONTINUE
C     FIND SURFACE COMPOSITION OPACITY TABLE
C     FIRST FIND INTERPOLATING FACTOR FOR COMPOSITION
 630  CONTINUE
C DBG 11/95 GENERATE NEW SURFACE OPACITY TABLES
      CALL SURFOPAC(XENV)
      IF(LSCV)THEN
         CALL SETSCV
      ENDIF
 
C CLONE P,T,R,L ARRAY TO DUMMY ARRAY HPOLD.
C HPOLD IS USED TO LIMIT THE TIMESTEP BASED ON CHANGES FROM
C MODEL TO MODEL IN P,T,R,L.
      DO 710 I = 1,M
         HPO(I) = HP(I)
         HTO(I) = HT(I)
         HRO(I) = HR(I)
         HLO(I) = HL(I)
C  JVS 04/14 Added Teff to the list of saved values
	   TEFFLO = TEFFL
C  JVS 05/25 Added model number to list of saved values
       MO = M 
 710  CONTINUE
      IF(LROT) THEN
         DO 720 I = 1,M
	    WOLD(I) = OMEGA(I)
 720     CONTINUE
      ENDIF

C 8/17 G Somers
C  FIND BASIC PHYSICAL QUANTITIES. THIS CODE STOLEN FROM PHYSIC
C  FIND ACTUAL AND ADIABATIC TEMPERATURE GRADIENTS,OPACITY,AND
C  MEAN MOLECULAR WEIGHT FOR ALL RADIATIVE SHELLS.
C      if(.False.)then
C      LDERIV = .FALSE.
C      LOCOND = .FALSE.
C      LATMO = .FALSE.
C      IDT = 15
C      DO 725 I = 1,4
C         IDD(I) = 5
C 725  CONTINUE
C      DO 730 IM = 1,M
C         SL = HS(IM)
C         TL = HT(IM)
C         PL = HP(IM)
C         RL = HR(IM)
C         B = HL(IM)
C         X = HCOMP(1,IM)
C         Z = HCOMP(3,IM)
C         DL = HD(IM)
C         FPL = FP(IM)
C         FTL = FT(IM)
C
C         IF(LMHD) THEN
C            CALL MEQOS(TL,T,PL,P,DL,D,X,Z,BETA,BETAI,BETA14,FXION,RMU,
C     *           AMU,EMU,ETA,QDT,QDP,QCP,DELA,QDTT,QDTP,QAT,QAP,QCPT,
C     *           QCPP,LDERIV,LATMO,KSAHA)
C         ELSE
C            IF (LDH) THEN
C               XXDH = HCOMP(1,IM)
C               YYDH = HCOMP(2,IM)+HCOMP(4,IM)
C               ZZDH = HCOMP(3,IM)
C               ZDH(1) = HCOMP(5,IM)+HCOMP(6,IM)
C               ZDH(2) = HCOMP(7,IM)+HCOMP(8,IM)
C               ZDH(3) = HCOMP(9,IM)+HCOMP(10,IM)+HCOMP(11,IM)
C            END IF
C            CALL EQSTAT(TL,T,PL,P,DL,D,X,Z,BETA,BETAI,BETA14,FXION,RMU,
C     *           AMU,EMU,ETA,QDT,QDP,QCP,DELA,QDTT,QDTP,QAT,QAP,QCPT,
C     *           QCPP,LDERIV,LATMO,KSAHA)
C         ENDIF
C         CALL GETOPAC (DL,TL,X,Z,O,OL,QOD,QOT,FXION)
C         IOVIM=IM
C         CALL TPGRAD(TL,T,PL,P,D,RL,SL,B,O,QDT,QDP,QOT,QOD,QCP,DEL,
C     *        DELR,DELA,QDTT,QDTP,QAT,QAP,QACT,QACP,QACR,QCPT,QCPP,
C     *        VEL,LDERIV,LCONV,FPL,FTL,TEFFL)
C         SDEL(1,IM) = DELR
C         SDEL(2,IM) = DEL
C         SDEL(3,IM) = DELA 
CC JVS 10/13 Always want SVEL
C	 SVEL(IM) = VEL
C 730  CONTINUE
C      endif

      CALL PHYSIC(FP,FT,HCOMP,HD,HG,HL,HP,HR,HS,HT,LC,LCZ,M,TEFFL)
      CALL OVROT(HCOMP,HD,HP,HR,HS,HT,LC,M,LCZ,MRZONE,MXZONE,NRZONE,
     *           NZONE)
C INITIALIZE TAUCZ, PPHOT, AND FRACSTEP
      CALL GETTAU(HCOMP,HR,HP,HD,HG,HS1,HT,FP,FT,TEFFL,
     *            HSTOT,BL,M,LC,ENVR)
      TAUCZ0 = TAUCZ
      PPHOT0 = PPHOT
      FRACSTEP = 0.5

      RETURN
      END
