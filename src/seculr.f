C $$$$$$
      SUBROUTINE SECULR(DELTS,DT,HD,HG,HI,HL,HP,HR,HS,HS1,HS2,HT,
     *                  HJMSAV,LCZ,LC,M,MODEL,OMEGA,
     *                  HJM,ETA2,QIW,R0,HCOMP,LFIRST,IMIN,IMAX,
     *                  BL,HSTOT,SJTOT,SMASS,TEFFL,LREDO,IREDO,
     *                  HICZ,HSBOT,HSTOP,OMEGAS,LCZSUR,
     *                  MRZONE,MXZONE,NRZONE,NZONE,
     *                  COD2,HV,LOK)
C MHP 6/00 ADDED MRZONE,MXZONE,NRZONE,NZONE FOR BS MIX PLUS BURN
      PARAMETER(JSON=5000)
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT LOGICAL*4(L)

      COMMON/CCOUT/LSTORE,LSTATM,LSTENV,LSTMOD,LSTPHYS,LSTROT,LSCRIB
      COMMON/CCOUT1/NPENV,NPRTMOD,NPRTPT,NPOINT
      COMMON/CONST/CLSUN,CLSUNL,CLNSUN,CMSUN,CMSUNL,CRSUN,CRSUNL,CMBOL
      COMMON/CONST1/CLN,CLNI,C4PI,C4PIL,C4PI3L,CC13,CC23,CPI
C MHP 8/17 ADDED EXCEN, C_2 TO COMMON BLOCK FOR MATT ET AL. 2012 CENT. TERM
      COMMON/CWIND/WMAX,EXMD,EXW,EXTAU,EXR,EXM,EXL,EXPR,CONSTFACTOR,
     *             STRUCTFACTOR,EXCEN,C_2,LJDOT0
C      COMMON/CWIND/WMAX,EXMD,EXW,EXTAU,EXR,EXM,CONSTFACTOR,STRUCTFACTOR,LJDOT0
      COMMON/DIFUS/DTDIF,DJOK,ITDIF1,ITDIF2
C MHP 6/00 ADDED FLAG FOR CALL TO NDIFCOM
      COMMON/FLAG/LEXCOM
C 3/92 COMMON BLOCK ADDED FOR CENTERED DW/DLNR.
      COMMON/INTVAR/ALM(JSON),DELAMI(JSON),DELMI(JSON),DM(JSON),
     *     EPSILM(JSON),HGM(JSON),HS3(JSON),PM(JSON),
     *     QDTM(JSON),RM(JSON),TM(JSON)
      COMMON/OLDMOD/HPO(JSON),HTO(JSON),HRO(JSON),HLO(JSON),HDO(JSON),
     *     HCOMPP(15,JSON),HSS(JSON),LCO(JSON),LCZO(JSON),TEFFLO,MO
      COMMON/TEMP2/VES(JSON),VES0(JSON),VSS(JSON),VSS0(JSON),
     *     HLE(JSON),VGSF(JSON),VGSF0(JSON),VMU(JSON)
      COMMON/OLDAB/HCOMPS(15,JSON)
C ADD OPTION FOR VARIABLE FC.
      COMMON/VARFC/VFC(JSON),LVFC,LDIFAD
      COMMON/LUOUT/ILAST,IDEBUG,ITRACK,ISHORT,IMILNE,IMODPT,ISTOR,IOWR
      COMMON/ROTPRT/LPRT0
      COMMON/NOTRAN/LNOJ
C MHP 9/94 ADDED DISK LOCKING OPTION - FLAG, TIME OVER WHICH LOCKING
C IS ENFORCED, AND PERIOD AT WHICH LOCKING IS SET ARE OPTIONS.
      COMMON/DISK/SAGE,TDISK,PDISK,LDISK
      COMMON/EGRID/CHI(JSON),ECHI(JSON),EQS1(JSON),DCHI,NTOT
C Time change of theta
      COMMON/OLDROT2/THO(JSON),THN(JSON),THM(JSON),
     *               DDELM(JSON),FESTIME(JSON),THP(JSON),
     *               QWRST(JSON),WMST(JSON),QWRMST(JSON)
C MHP 3/99 ADDED FLAG TO TREAT THE ENTIRE STAR AS 'CONVECTIVE'
C FOR ANGULAR MOMENTUM PURPOSES.
      COMMON/SBROT/LSOLID
      DIMENSION HD(JSON),HI(JSON),HG(JSON),HP(JSON),HS(JSON),
     * HR(JSON),LC(JSON),OMEGA(JSON),HL(JSON),ETA2(JSON),QIW(JSON),
     * HS1(JSON),HS2(JSON),HT(JSON),QWRMAX(JSON),R0(JSON),EM(JSON),
     * HJMSAV(JSON),LCZ(JSON),COD(JSON),ECOD2(JSON),
     * EI(JSON),EJ(JSON),ECOD(JSON),HRU(JSON),RMID(JSON),
     * HV(JSON),QWLNR(JSON),HCOMP(15,JSON),
     * HJM(JSON),DJ(JSON),HJMP(JSON),COD2(JSON),WSAV(JSON),EW(JSON),
     * ID(JSON),
     *     MRZONE(13,2),MXZONE(12,2)
      SAVE
C MHP 6/00 ADDED MRZONE,MXZONE FOR BS MIXING PLUS BURNING
C   SECULR CALCULATES THE TRANSFER OF ANGULAR MOMENTUM(AND THE ASSOCIATED      
C   TRANSPORT OF COMPOSITION) DUE TO SECULAR ROTATIONAL INSTABILITIES.

C  PRINT OUT DETAILS OF THE DIFFUSION EVERY TIME SHORT OR LONG
C  OUTPUT OF THE MODEL IS GENERATED.
C
C G Somers 11/14, EXCLUDE THE IO TO THE FULL FILE. THE CODE
C WILL NO LONGER REPORT THE CHANGES TO J AT EACH POINT, BECAUSE
C THIS CAN BE EASILY INFERRED FROM THE EXTENDED SHORT FILE. IF
C DESIRED, THIS OUTPUT CAN BE RETURNED.
C      IF(.NOT.LPRT0)THEN
C         LPRT = MOD(MODEL+1,NPRTMOD).EQ.0
C      ELSE
C         LPRT = .TRUE.
C      ENDIF
C      IF(.NOT.LSCRIB.OR..NOT.LPRTIN) LPRT = .FALSE.
      LPRT = .FALSE.
C MHP 9/94
C DISK LOCKING CHECKED
      LOCK = .FALSE.
      IF(LDISK .AND. SAGE.LE.TDISK)LOCK = .TRUE.
C  FIRST AND LAST SHELL BOUNDARY CONDITIONS REQUIRE THAT THESE SHELLS BE
C  TREATED AS 'CONVECTIVE' FOR DIFFUSION PURPOSES. FIX THIS.
      LCZ1 = LCZ(1)
      LCZM = LCZ(M)
C  SET UP FACTORS USED TO COMPUTE DIFFUSION VELOCITIES.
      CALL SETUPV(HD,HG,HL,HP,HR,HS1,HT,IMIN,IMAX,LCZ,M,HRU,QWRMAX)
      CLTOT = CLSUN*HL(M)
C  COMPUTE ANGULAR VELOCITY GRADIENTS
      DO 10 I = IMIN,IMAX
C CENTER LOGARITHMIC DERIVATIVE.
         RLNC = LOG10(RM(I))
         DR1 = 1.0D0/CLN/(HR(I)-RLNC)+1.0D0/CLN/(RLNC-HR(I-1))
         QWLNR(I) = 0.25D0*(OMEGA(I)-OMEGA(I-1))*DR1
C        QWLNR(I) = (OMEGA(I)-OMEGA(I-1))/CLN/(HR(I)-HR(I-1))
   10 CONTINUE
      CALL GETQUA(HD,HG,HRU,OMEGA,M)
      DO I = 1,M
         VFC(I) = 0.0D0
      END DO
C  CHECK STABILITY OF THE MODEL AND COMPUTE CIRCULATION VELOCITIES.
C  MECHANISMS CONSIDERED:SECULAR AND DYNAMICAL SHEAR,EDDINGTON CIRCULATION,
C  AND THE GSF INSTABILITY.
      IT = 1
C MHP 06/02 added timestep to call
      CALL VCIRC(HJM,HR,HRU,IMIN,IMAX,IT,LCZ,M,OMEGA,LDO,QWLNR,
     *           QWRMAX,HV,CLTOT,DT,HP)
      IF(LVFC) CALL GETFC(HD,HRU,HV,IMIN,IMAX,OMEGA)
C  STORE INITIAL ANGULAR MOMENTUM DISTRIBUTION.
      DO 20 I =1,M
         HJMP(I) = HJMSAV(I)
         WSAV(I) = OMEGA(I)
   20 CONTINUE
C  STORE INITIAL SURFACE ANGULAR VELOCITY FOR USE IN ANGULAR MOMENTUM
C  LOSS CALCULATIONS.
C      WBEG = OMEGA(M)
      WBEG = WMST(M)
      LOK = .FALSE.
C  ON THE FIRST LEVEL OF ITERATION, THE UNPERTURBED MODEL IS USED TO
C  CALCULATE THE DIFFUSION VELOCITIES. ON THE SECOND AND SUBSEQUENT
C  ITERATIONS, THE ANGULAR MOMENTUM DISTRIBUTION FROM THE PREVIOUS
C  ITERATION IS USED TO GET THE VELOCITIES.  THIS 'NEW' VELOCITY IS THEN
C  AVERAGED WITH THE VELOCITY FOUND IN THE PREVIOUS ITERATION TO GET A
C  CORRECTED V AND THUS A MORE ACCURATE RUN OF DIFFUSION COEFFICIENTS.
      DO 100 IT = 1,ITDIF2
         OMEGAS = OMEGA(M)
         IF(IT.GT.1)THEN
C  COMPUTE NEW RUN OF ANGULAR VELOCITIES (AVERAGE OF INITIAL AND
C  LATEST VALUES).
            DO I = 1,M
               OMEGA(I) = 0.5D0*(OMEGA(I)+WSAV(I))
            END DO
C  COMPUTE NEW RUN OF ANGULAR VELOCITY GRADIENTS.
            DO 30 I = IMIN,IMAX
C CENTER LOGARITHMIC DERIVATIVE.
               RLNC = LOG10(RM(I))
               DR1 = 1.0D0/CLN/(HR(I)-RLNC)+1.0D0/CLN/(RLNC-HR(I-1))
               QWLNR(I) = 0.25D0*(OMEGA(I)-OMEGA(I-1))*DR1
C              QWLNR(I) = (OMEGA(I)-OMEGA(I-1))/CLN/(HR(I)-HR(I-1))
   30       CONTINUE
C  ON 2ND AND SUBSEQUENT ITERATIONS,COMPUTE CHARACTERISTIC VELOCITIES
C  FOR THE NEW RUN OF OMEGA AND COMPOSITION FOUND IN THE PREVIOUS
C  ITERATION.
C MHP 06/02 added pressure and timestep to call
            CALL VCIRC(HJM,HR,HRU,IMIN,IMAX,IT,LCZ,M,OMEGA,LDO,QWLNR,
     *                 QWRMAX,HV,CLTOT,DT,HP)
            IF(LVFC) CALL GETFC(HD,HRU,HV,IMIN,IMAX,OMEGA)
C  NOW THAT THE NEW DIFFUSION VELOCITIES HAVE BEEN COMPUTED, RESET THE
C  ANGULAR MOMENTUM AND COMPOSITION ARRAYS TO THEIR ORIGINAL VALUES.
            DO 50 I = 1,M
               HJM(I) = HJMSAV(I)
               DO 40 J = 1,4
                  HCOMP(J,I) = HCOMPS(J,I)
   40          CONTINUE
   50       CONTINUE
C MHP 10/91 CHANGED TO REMIX CZ'S TO THEIR PROPER DEPTH!
C OTHERWISE, DRASTIC ERRORS OCCUR IN THE PRESENCE OF A DEEPENING CZ
C (THE LOCAL ABUNDANCE AT THE CZ BASE PRIOR TO THE DEEPENING OF THE
C  CZ IS ASSIGNED TO THE WHOLE CZ - X AND HE3 ONLY, AND ONLY FOR A
C  CZ WHICH IS BECOMING DEEPER.)
C  ENSURE THAT CONVECTIVE REGIONS ARE FULLY MIXED.
C  JVS 0212 CALL MIXCZ(HCOMP,HS2,LCZ,M)
C G Somers 6/14, SET IMIX = .FALSE. SO THE CORRECT GRADS ARE USED.
         IMIX = .FALSE.
         CALL MIXCZ(HCOMP,HS2,HS1,LCZ,HR,HP,HD,HG,M,IMIX)
C G Somers END
         ENDIF
C  CALCULATE LOSS OF ANGULAR MOMENTUM DUE TO WIND FOR AN 
C  ISOLATED SURFACE C.Z.(NO COUPLING WITH INTERIOR VIA DIFFUSION).
         IF(LCZSUR.AND.HV(IMAX).EQ.0.0D0 .AND. .NOT.LOCK)THEN
C  FIND MOMENT OF INERTIA OF THE SURFACE C.Z.
            HICZ = 0.0D0
            DO 55 I = IMAX,M
               HICZ = HICZ + HI(I)
   55       CONTINUE
            LJDOT = LJDOT0
C MHP 10/02 UNUSED LFIRST REMOVED FROM CALL
            CALL MWIND(BL,DT,HSBOT,HSTOP,IMAX,M,LJDOT,OMEGAS,
     *                SJTOT,SMASS,TEFFL,HICZ,HJM)
C     *                SJTOT,SMASS,TEFFL,HICZ,HJM,LFIRST)
C REMOVE TORQUE FROM ENTIRE STAR
         ELSE IF(LCZSUR .AND. LSOLID)THEN
            LJDOT = LJDOT0
            HSBOTJ = 0.0D0
            HSTOPJ = EXP(CLN*HSTOT)
            IMAXJ = 1
            CALL MWIND(BL,DT,HSBOTJ,HSTOPJ,IMAXJ,M,LJDOT,OMEGAS,
     *                SJTOT,SMASS,TEFFL,HICZ,HJM)
C            WRITE(*,*)HJM(1),HJM(M)
            JSTART = 1
            JEND = M            
            CALL SOLID(HD,HJM,HR,HS,HS2,JSTART,JEND,ETA2,HI,OMEGA,
     *                 QIW,R0,M)
C            WRITE(*,*)OMEGA(1),OMEGA(M)
         ENDIF
C  IF LDO=F,NO INSTABILITIES OCCUR (STABLE AGAINST ALL MECHANISMS).
         IF(.NOT.LDO) GOTO 9999
C  TREAT CENTRAL AND SURFACE ZONES AS ALWAYS CONVECTIVE
C  (SHOULD BE FIXED TO GIVE BETTER CENTRAL/SURFACE B.C.)
         LCZ(1) = .TRUE.
         LCZ(M) = .TRUE.
C  UNSTABLE REGION EXISTS.
C  FIND DIFFUSION COEFFICIENTS(COD) FOR ALL UNSTABLE REGIONS.
         CALL CODIFF(DELTS,HRU,HV,IMIN,IMAX,LC,LCZ,M,RMID,COD,COD2)
C  EACH UNSTABLE REGION IS SOLVED SEPARATELY STARTING HERE.
C  LTEST IS SET T IF A NON-ZERO VELOCITY IS ENCOUNTERED.
C  IBEG IS THE ZONE BELOW THE FIRST NON-ZERO V;IEND IS THE ZONE ABOVE
C  THE LAST NON-ZERO V.
         LDUM = .FALSE.
         ISTART = IMIN
   60    CONTINUE
         LTEST = .FALSE.
C MHP 8/13 TREAT ENTIRE DOMAIN AS UNSTABLE IF A CONSTANT DIFFUSION
C COEFFICIENT IS BEING ADDED
         IF(LCODM.AND.CODM.GT.0.0D0)THEN
            LTEST = .TRUE.
            IBEG = IMIN - 1
            IEND = IMAX
            ISTART = IMAX + 1
            GOTO 80
         ENDIF
         DO 70 J = ISTART,IMAX
            IF(HV(J).GT.0.0D0) THEN                    
               LTEST = .TRUE.
               IF(.NOT.LDUM) THEN
C  START OF UNSTABLE REGION
                  LDUM = .TRUE.
                  IBEG = J - 1 
               ENDIF
            ELSE IF(LDUM) THEN
C  END OF UNSTABLE REGION 
               IEND = J - 1
               LDUM = .FALSE.             
               ISTART = J + 1
               GOTO 80
            ENDIF
   70    CONTINUE
C  IF THE LAST INTERFACE IS UNSTABLE (NON-ZERO V) ENSURE THAT IEND IS SET
C  PROPERLY.
         IF(LDUM) IEND = IMAX
         ISTART = IMAX + 1
   80    CONTINUE
C  IF NO NON-ZERO V'S ENCOUNTERED, EXIT.
         IF(.NOT.LTEST) GOTO 90
C MHP 08/03 REMOVED OBSOLETE EQUAL ROUTINE
C         IF(M.GT.1)THEN
C  TRANSFORM TO EQUAL GRID SPACING IN CHI FOR THE REGION.
C CHI IS A NORMALIZED SUM OF THE VARIABLES USED TO PLACE POINTS
C IN THE HENYEY SCHEME, CHOSEN SUCH THAT THE GRID USED IN THE
C ANGULAR MOMENTUM EVOLUTION IS CLOSE TO THE GRID STORED FOR
C THE STRUCTURAL EVOLUTION.
         CALL ROTGRID(COD,COD2,HD,HI,HJMSAV,HL,HP,HR,HRU,HS,HS1,HS2,
     *                HSTOT,IBEG,IEND,LCZ,M,WSAV,DR,ECOD,
     *                ECOD2,EI,EJ,EM,EW,LDUM2)
C         ELSE
C         CALL EQUAL(BL,COD,COD2,HD,HI,HJMSAV,HRU,HS,HS1,HS2,HSTOT,
C     *              IBEG,IEND,LCZ,M,TEFFL,DR,ECOD,ECOD2,EI,EJ,
C     *              EM,ES1,EW,WSAV,LDUM2,NTOT)
C         ENDIF
C  LDUM2=T IF TWO C.Z.'S ARE SEPARATED BY ONE RADIATIVE ZONE;
C  SKIP IF THIS OCCURS.
         IF(LDUM2) THEN
            IF(ISTART.LE.IMAX) THEN
               GOTO 60
            ELSE
               GOTO 90
            ENDIF
         ENDIF
C MHP 3/09 SKIP ANGULAR MOMENTUM EVOLUTION FOR SOLID BODY MODELS
         IF(.NOT.LSOLID)THEN
C  CHECK IF SURFACE C.Z. IS PART OF THE UNSTABLE REGION.
C  IF SO,CALCULATE TERMS FOR DIFFUSION.
         IF(LCZSUR.AND.IEND.EQ.IMAX)THEN
            IF(LOCK)THEN
               WIND1 = 0.0D0
               WIND2 = 0.0D0
               LFIX = .TRUE.
            ELSE
               LFIX = .FALSE.
               IF(LJDOT0)THEN
                  HICZ = EI(NTOT)
                  OMEGAS = OMEGA(M)
                  CALL MCOWIND(BL,DT,HICZ,IT,OMEGAS,SMASS,
     *                        TEFFL,WBEG,WIND1,WIND2)
               ELSE
                  WIND1 = 0.0D0
                  WIND2 = 0.0D0
               ENDIF
            ENDIF
         ELSE
            LFIX = .FALSE.
            WIND1 = 0.0D0
            WIND2 = 0.0D0
         ENDIF
         LOKAD = .FALSE.
         IF(.NOT.LDIFAD)THEN
C  SET UP DIFFUSION EQUATION ARRAYS TO SOLVE FOR OMEGA AT END OF TSTEP
            CALL DCOEFT(ECOD,DR,DT,EI,EJ,EW,NTOT,WIND1,WIND2,LFIX)
C  SOLVE MATRIX FOR THE RUN OF OMEGA AT THE END OF THE TIMESTEP AT THE
C  EQUALLY SPACED GRID POINTS.
            CALL TRIDIA(NTOT,EI,EJ,DJ,SUMDJ)
C  TRANSFORM THE NEW ANGULAR MOMENTUM DISTRIBUTION BACK TO THE ORIGINAL GRID 
C  POINTS IN THE UNSTABLE REGION.
         ELSE
C SOLVE FOR OMEGA AND ITS DERIVATIVES IN A BAND MATRIX
            CALL DADCOEFT(DR,DT,EI,EJ,EW,NTOT,WIND1,WIND2,DJ,
     *                    ECOD2,SUMDJ,LFIX,LOKAD)
         ENDIF
C MHP 08/03 REMOVED OBSOLETE EQUAL2 ROUTINE
C         IF(M.GT.1)THEN
C TRANSFORM BACK TO THE ORIGINAL GRID
            CALL EQ2MOD(DJ,EJ,HS2,IBEG,IEND,LCZ,M,SUMDJ,HJM)
C         ELSE
C         CALL EQUAL2(DJ,EJ,EM,ES1,HS1,IBEG,IEND,LCZ,M,NTOT,HJM)
C         ENDIF
C  PERFORM COMPOSITION DIFFUSION.
C  UNTIL THE FINAL ITERATION, ONLY COMPOSITION DIFFUSION OF SPECIES WHICH
C  AFFECT GRADIENTS IN MEAN MOLECULAR WEIGHT IS COMPUTED (H,HE3,HE4).
C  ON THE FINAL ITERATION, DIFFUSION OF ALL SPECIES IS PERFORMED.
C MHP 08/03 REMOVED OBSOLETE DIFCOM ROUTINE
C         IF(M.GT.1)THEN
         ENDIF
         JBEG = 1
         JEND = 4
         CALL  NDIFCOM(DT,COD2,ECOD2,EM,HD,HL,HP,HR,HS,HS1,HS2,
     *                HSTOT,HV,IBEG,IEND,IMAX,IMIN,LCZ,LOK,M,NTOT,
     *                HCOMP,JBEG,JEND)
C         ELSE
C         CALL DIFCOM(DR,DT,COD2,ECOD2,EM,ES1,HRU,HS,HS1,HS2,HV,
C     *               IBEG,IEND,IMIN,LCZ,LOK,M,NTOT,HCOMP)
C         ENDIF
C  RETURN FOR NEXT REGION IF APPLICABLE
         IF(ISTART.LE.IMAX) GOTO 60
   90    CONTINUE
C CHECK SOLUTION,UPDATE OMEGA,AND SEE IF ANOTHER ITERATION IS NEEDED.
         LCZ(1) = LCZ1
         LCZ(M) = LCZM
C mhp 10/02 unused ecod, ecod2 no longer passed
C         WRITE(*,*)LSOLID,OMEGA(1),OMEGA(M)
         CALL CHECKJ(HD,HJMP,HJMSAV,HR,HS,HS2,HV,IMIN,IMAX,IT,LCZ,
     *         LPRT,M,DT,ETA2,HI,HJM,IREDO,LOK,LREDO,OMEGA,QIW,R0,
     *         WSAV,ID,IDM,LOKAD)
C     *         WSAV,ID,IDM,ECOD,ECOD2,LOKAD)
C         WRITE(*,*)OMEGA(1),OMEGA(M)
C CHECK COMPOSITION DIFFUSION AND RECOMPUTE MEAN MOLECULAR WEIGHT.
         IF(.NOT.LREDO)CALL CHECKC(HCOMP,IT,LPRT,M,DT,IREDO,LOK,LREDO)
C MHP 9/93
         IF(LNOJ)LOK = .TRUE.
C IF LOK=T,CONVERGED.
         IF(LOK)GOTO 200
C IF LREDO=T, A PROBLEM REQUIRES TIMESTEP CUTTING.
         IF(LREDO)GOTO 9999
  100 CONTINUE
      LOK = .TRUE.
  200 CONTINUE
C PERFORM COMPOSITION DIFFUSION OF REMAINING SPECIES.
      LCZ(1) = .TRUE.
      LCZ(M) = .TRUE.
C MHP 6/00 ADDED OPTION OF BS EXTRAPOLATION FOR HE3, CNO
C      LBSMIX=.TRUE.
C      IF(LBSMIX)THEN
C         CALL BSCOMP(DR,DT,COD2,ECOD2,EM,ES1,HRU,HS,HS1,HS2,
C     *               IBEG,IEND,IMIN,LCZ,LOK,M,NTOT,HCOMP,HV,
C     *           HD,HP,HR,HT,MRZONE,MXZONE,NRZONE,NZONE,HSTOT)
C      ELSE
C MHP 08/03 REMOVED OBSOLETE DIFCOM ROUTINE
C      IF(M.GT.1)THEN
      JBEG = 5
      IF(LEXCOM)THEN
         JEND = 15
      ELSE
         JEND = 11
      ENDIF
      CALL NDIFCOM(DT,COD2,ECOD2,EM,HD,HL,HP,HR,HS,HS1,HS2,
     *             HSTOT,HV,IBEG,IEND,IMAX,IMIN,LCZ,LOK,M,NTOT,
     *             HCOMP,JBEG,JEND)
C      ELSE
C      CALL DIFCOM(DR,DT,COD2,ECOD2,EM,ES1,HRU,HS,HS1,HS2,HV,
C     *            IBEG,IEND,IMIN,LCZ,LOK,M,NTOT,HCOMP)
C      ENDIF
C MHP 6/00
      LCZ(1) = LCZ1
      LCZ(M) = LCZM
C ADD I/O FOR MIXING.
      IF(LPRT)THEN
C MHP 8/03 ADDED HEADER LINE.
      WRITE(IMODPT,198)
 198  FORMAT('COMPOSITION CHANGE FROM ROTATIONAL MIXING'/
     *       5X,'H',8X,'HE3',7X,'C12',7X,'C13',7X,'N14',
     *       7X,'LI7',7X,'BE9')
      DO I = 1,IDM
         DX = HCOMP(1,ID(I))-HCOMPS(1,ID(I))
         DHE3 = HCOMP(4,ID(I))-HCOMPS(4,ID(I))
         DC12 = HCOMP(5,ID(I))-HCOMPS(5,ID(I))
         DC13 = HCOMP(6,ID(I))-HCOMPS(6,ID(I))
         DN14 = HCOMP(7,ID(I))-HCOMPS(7,ID(I))
         DLI7 = HCOMP(14,ID(I))-HCOMPS(14,ID(I))
         DBE9 = HCOMP(15,ID(I))-HCOMPS(15,ID(I))
         WRITE(IMODPT,199)ID(I),DX,DHE3,DC12,DC13,DN14,DLI7,DBE9
 199     FORMAT(I5,1P7E10.3)
      END DO
      ENDIF
 9999 CONTINUE
C MHP 8/03 - OMITTED I/O, COULD REINTRODUCE IN ANOTHER FILE
C  DETERMINE COUPLING FACTOR (I.E. THE FRACTION OF THE TOTAL ANGULAR
C  MOMENTUM LOST FROM THE CORE RELATIVE TO ITS FRACTION OF THE TOTAL
C  MOMENT OF INERTIA).
C      DJCORE = 0.0D0
C      HICORE = 0.0D0
C      HJTOT = 0.0D0
C      DO I = 1,IMAX-1
C         DJCORE = DJCORE + (HJM(I)-HJMSAV(I))*HS2(I)
C         HICORE = HICORE + HI(I)
C         HJTOT = HJTOT + HJM(I)*HS2(I)
C      END DO
C      HIENV = 0.0D0
C      DJENV = 0.0D0
C      DO I = IMAX,M
C         DJENV = DJENV + (HJM(I)-HJMSAV(I))*HS2(I)
C         HIENV = HIENV + HI(I)
C         HJTOT = HJTOT + HJM(I)*HS2(I)
C      END DO
C      FI = HICORE/(HICORE+HIENV)
C      IF(ABS(DJCORE+DJENV).GT.1.0D-32)THEN
C         FJ = DJCORE/(DJCORE+DJENV)
C      ELSE
C         FJ = 1.0D0
C      ENDIF
C      WRITE(88,709)SAGE,HJTOT,OMEGA(M),FJ,FJ/FI,
C     *               HCOMP(14,M),HCOMP(15,M)
C  709 FORMAT(1P7E11.3)
      RETURN
      END
